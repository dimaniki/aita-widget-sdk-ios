// Generated by Apple Swift version 2.0 (swiftlang-700.0.59 clang-700.0.72)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC9WidgetSDK16AAViewController")
@interface AAViewController : UIViewController
- (UIStatusBarStyle)preferredStatusBarStyle;
- (nonnull instancetype)initWithNibName:(NSString * __nullable)nibNameOrNil bundle:(NSBundle * __nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITraitCollection;
@protocol UIViewControllerTransitionCoordinator;
@protocol UIViewControllerContextTransitioning;

SWIFT_CLASS("_TtC9WidgetSDK21AAPopupViewController")
@interface AAPopupViewController : AAViewController <UIViewControllerAnimatedTransitioning>
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
+ (void)initialize;

/// Content view can be set if can't be inherited
- (void)changeContentHeightIfNeeded:(CGFloat)viewHeight animated:(BOOL)animated;

/// Hides popup controller
- (void)hideFromContainer:(BOOL)animated completion:(void (^ __nullable)(void))completion;
- (void)willTransitionToTraitCollection:(UITraitCollection * __nonnull)newCollection withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> __nonnull)coordinator;

/// Entry-point for presenting popup modal controller.
///
/// \param viewController a controller to be presented
///
/// \param container container controller where popup controller will be presented
///
/// \param animated if aniamation needed. default is <code>true
/// </code>
///
/// \param completion will be called when popup controller will be dismissed
+ (void)showPopupWithViewController:(UIViewController * __nonnull)viewController inContainer:(UIViewController * __nonnull)container animated:(BOOL)animated completion:(void (^ __nullable)(void))completion;
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> __nullable)transitionContext;
- (void)animateTransition:(id <UIViewControllerContextTransitioning> __nonnull)transitionContext;
@end

@class PopupHeaderButton;
enum PopupViewControllerPresentationStyle : NSInteger;


/// To be implemented if default popup behavior needs to be adjusted
SWIFT_PROTOCOL("_TtP9WidgetSDK29AAPopupViewControllerDelegate_")
@protocol AAPopupViewControllerDelegate <NSObject>
@optional

/// Allow scrolling the whole container (rather than just contents), to content-view height needs to be heigher than container's.
///
/// Default is <code>false
/// </code>
- (BOOL)popupViewControllerShouldEnableScrolling:(AAPopupViewController * __nonnull)controller;

/// Allow to configure whether to add bottom margin to container or not.
///
/// Default is <code>true
/// </code>
- (BOOL)popupViewControllerShouldAddBottomMargin:(AAPopupViewController * __nonnull)controller;

/// Return 0 if full-width of any positive value to constrain content-view width. You can also check current horizontal class / ui idiom.
///
/// Preferred values: 0, 600 (for iPad)
///
/// Default is 0 (full-widgth)
///
/// \param collection Current trait collection
- (CGFloat)popupViewControllerPreferredWidth:(AAPopupViewController * __nonnull)controller forTraitCollection:(UITraitCollection * __nonnull)collection;

/// Button to be presented on the right side of the close button. You are responsible for subscribing to button's action.
///
/// Default is nil.
- (PopupHeaderButton * __nullable)popupViewControllerRightHeaderButton:(AAPopupViewController * __nonnull)controller;

/// Button to be presented on the left side of the close button. You are responsible for subscribing to button's action.
///
/// Default is nil.
- (PopupHeaderButton * __nullable)popupViewControllerLeftHeaderButton:(AAPopupViewController * __nonnull)controller;

/// Called when close button is tapped.
- (void)popupViewControllerWillClose:(AAPopupViewController * __nonnull)controller;
- (enum PopupViewControllerPresentationStyle)popupViewControllerPreferredPresentationStyle:(AAPopupViewController * __nonnull)controller;
@end



SWIFT_CLASS("_TtC9WidgetSDK18AAWidgetController")
@interface AAWidgetController : AAViewController
- (nonnull instancetype)initWithNibName:(NSString * __nullable)nibNameOrNil bundle:(NSBundle * __nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class Dashboard;
@class UICollectionViewCell;


/// Base protocol for all widgets. TripWidget & AirportWidget are more specific.
SWIFT_PROTOCOL("_TtP9WidgetSDK10AitaWidget_")
@protocol AitaWidget <NSObject>
@optional

/// Called once on app start
+ (void)prepareData;
@required

/// Link to dashboard in which the widget is currently being presented
@property (nonatomic, weak) Dashboard * __null_unspecified dashboard;

/// Will be called when the users taps on widget Presentation style depends on modalPresentationStyle
///
/// Check out <code>Dashboard.presentWidgetController
/// </code> for different <code>modalPresentationStyle
/// </code> options
///
/// \returns  controller to be presented or nil and then nothing happens
@property (nonatomic, readonly) UIViewController * __nullable viewController;

/// UICollectionViewCell identifier, should be the same as cell's .xib name
@property (nonatomic, readonly, copy) NSString * __nonnull cellIdentifier;

/// Desired height for the cell (including margins from the top & bottom).
///
/// If you want to update <code>cellHeight
/// </code>, call <code>Dashboard.reloadWidget
/// </code> and then return updated value.
@property (nonatomic, readonly) CGFloat cellHeight;

/// Localized name of the widget, will be presented in DashboardEditor
@property (nonatomic, readonly, copy) NSString * __nonnull name;

/// Widget type. Will be used for analytics + populating widget's image feed_widget_%s in DashboardEditor
+ (NSString * __nonnull)widgetType;

/// Will be called each time widget are about to be presented
- (void)configureCell:(UICollectionViewCell * __nonnull)reusableCell;
@optional

/// Whether the widget can be displayed at the moment. Implementation notes: property should be implemented as private(set) dynamic var canBeDisplayed: Bool. When the widget desides to change its visibility its enough to just change this property.
@property (nonatomic, readonly) BOOL canBeDisplayed;
@end

@class Airport;


/// Should be implemented if the widget is intended to be presented on the Airport Feed
SWIFT_PROTOCOL("_TtP9WidgetSDK13AirportWidget_")
@protocol AirportWidget <AitaWidget>
@property (nonatomic) Airport * __null_unspecified airport;
- (nonnull instancetype)initWithDashboard:(Dashboard * __nonnull)dashboard airport:(Airport * __nonnull)airport;
@end


SWIFT_CLASS("_TtC9WidgetSDK12AitaUserInfo")
@interface AitaUserInfo : NSObject
+ (NSString * __nonnull)userID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC9WidgetSDK9Dashboard")
@interface Dashboard : AAViewController
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;

/// Can be called from the widget in order to present arbitrary view controller e.g. on button tap inside the widget
///
/// Presentation style depends on <code>modalPresentationStyle
/// </code> set to the controller:
///
/// <ul><li><code>.CurrentContext
/// </code> using 'Push' in navigation controller</li><li><code>.Custom
/// </code> presenting modally, expects <code>transitioningDelegate
/// </code> to be set (for custom animations)</li><li><code>.FormSheet
/// </code> presenting using popup controller, @see <code>AAPopupViewController
/// </code> for more info</li></ul>
/// \param widgetController controller to be presented
///
/// \param animated whether to use animation or not (default to <code>true
/// </code>)
- (void)presentWidgetController:(UIViewController * __nonnull)widgetController animated:(BOOL)animated;
- (void)reloadWidget:(id <AitaWidget> __nonnull)widget;
- (nonnull instancetype)initWithNibName:(NSString * __nullable)nibNameOrNil bundle:(NSBundle * __nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionView;
@class NSIndexPath;

@interface Dashboard (SWIFT_EXTENSION(WidgetSDK)) <UICollectionViewDelegate, UIScrollViewDelegate>
- (void)collectionView:(UICollectionView * __nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * __nonnull)indexPath;
@end


@interface Dashboard (SWIFT_EXTENSION(WidgetSDK))
@end


SWIFT_CLASS("_TtC9WidgetSDK16DashboardManager")
@interface DashboardManager : NSObject
+ (void)initialize;
+ (void)registerWidgetClass:(Class <AitaWidget> __nonnull)type;
- (void)observeValueForKeyPath:(NSString * __nullable)keyPath ofObject:(id __nullable)object change:(NSDictionary<NSString *, id> * __nullable)change context:(void * __null_unspecified)context;
@end


@interface DashboardManager (SWIFT_EXTENSION(WidgetSDK)) <UICollectionViewDataSource>
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * __nonnull)collectionView;
- (NSInteger)collectionView:(UICollectionView * __nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
- (UICollectionViewCell * __nonnull)collectionView:(UICollectionView * __nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * __nonnull)indexPath;
@end

@class UITableView;
@class UITableViewCell;

@interface DashboardManager (SWIFT_EXTENSION(WidgetSDK)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * __nonnull)tableView;
- (NSInteger)tableView:(UITableView * __nonnull)tableView numberOfRowsInSection:(NSInteger)section;
- (UITableViewCell * __nonnull)tableView:(UITableView * __nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * __nonnull)indexPath;
- (BOOL)tableView:(UITableView * __nonnull)tableView canEditRowAtIndexPath:(NSIndexPath * __nonnull)indexPath;
- (void)tableView:(UITableView * __nonnull)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath * __nonnull)indexPath;
- (BOOL)tableView:(UITableView * __nonnull)tableView canMoveRowAtIndexPath:(NSIndexPath * __nonnull)indexPath;
- (void)tableView:(UITableView * __nonnull)tableView moveRowAtIndexPath:(NSIndexPath * __nonnull)sourceIndexPath toIndexPath:(NSIndexPath * __nonnull)destinationIndexPath;
@end


@interface NSURL (SWIFT_EXTENSION(WidgetSDK))
@end


@interface NSURL (SWIFT_EXTENSION(WidgetSDK))
@end


@interface NSUserDefaults (SWIFT_EXTENSION(WidgetSDK))

/// Returns true if key exists
- (BOOL)hasKey:(NSString * __nonnull)key;

/// Removes value for key
- (void)remove:(NSString * __nonnull)key;
@end

@class UIImage;
@class UIColor;
@class UIFont;


/// Header button to be presented at the top of popup controller.
///
/// Either image or text should be set.
SWIFT_CLASS("_TtC9WidgetSDK17PopupHeaderButton")
@interface PopupHeaderButton : UIButton
@property (nonatomic) UIImage * __nullable image;
@property (nonatomic, copy) NSString * __nullable text;
@property (nonatomic) UIColor * __nonnull textColor;
@property (nonatomic) UIFont * __nullable buttonFont;
@property (nonatomic, getter=isEnabled) BOOL enabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGSize)intrinsicContentSize;
@end

typedef SWIFT_ENUM(NSInteger, PopupViewControllerPresentationStyle) {

/// (x)-button at the center (default)
  PopupViewControllerPresentationStyleModal = 0,

/// back button (no left item supported)
  PopupViewControllerPresentationStyleNavigation = 1,
};

@class Trip;
@class FlightInfo;

SWIFT_CLASS("_TtC9WidgetSDK13TripDashboard")
@interface TripDashboard : Dashboard
@property (nonatomic) Trip * __null_unspecified trip;
@property (nonatomic) FlightInfo * __null_unspecified flight;
- (void)viewDidLoad;
- (void)presentWidgetController:(UIViewController * __nonnull)widgetController animated:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * __nullable)nibNameOrNil bundle:(NSBundle * __nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/// Should be implemented if the widget is intended to be presented on the Travel Feed
SWIFT_PROTOCOL("_TtP9WidgetSDK10TripWidget_")
@protocol TripWidget <AitaWidget>
@property (nonatomic) Trip * __null_unspecified trip;
@property (nonatomic) FlightInfo * __null_unspecified flight;
- (nonnull instancetype)initWithDashboard:(Dashboard * __nonnull)dashboard trip:(Trip * __nonnull)trip flight:(FlightInfo * __nonnull)flight;

/// Most of the times should be true. false is used only for the most essential widgets which couldn't be hidden by the user
@property (nonatomic, readonly) BOOL canBeHidden;
@end


@interface UIColor (SWIFT_EXTENSION(WidgetSDK))
@end


@interface UIColor (SWIFT_EXTENSION(WidgetSDK))
+ (UIColor * __nonnull)aita_tintColor;
+ (UIColor * __nonnull)aita_backgroundColor;
+ (UIColor * __nonnull)aita_foregroundColor;
@end


@interface UIDevice (SWIFT_EXTENSION(WidgetSDK))
@end


@interface UIFont (SWIFT_EXTENSION(WidgetSDK))
@end


@interface UINavigationController (SWIFT_EXTENSION(WidgetSDK))
@end


@interface UIScreen (SWIFT_EXTENSION(WidgetSDK))
@end


@interface UIViewController (SWIFT_EXTENSION(WidgetSDK))
@end


@interface UIViewController (SWIFT_EXTENSION(WidgetSDK))

/// Current popup controller
@property (nonatomic) AAPopupViewController * __nullable aa_popupViewController;
@end

#pragma clang diagnostic pop
